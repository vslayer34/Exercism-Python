# functions that helps display Examples
from helper import display_task_name, display_example

"""
Functions to keep track and alter inventory.
https://exercism.org/tracks/python/exercises/inventory-management
"""


def create_inventory(items: list):
    """Create a dict that tracks the amount (count) of each element on the `items` list.

    :param items: list - list of items to create an inventory from.
    :return: dict - the inventory dictionary.
    """
    # add keys to a list
    key_list = []
    for item in items:
        if item not in key_list:
            key_list.append(item)
    
    # add values to a list
    values_list = []
    for key in key_list:
        values_list.append(items.count(key))
    
    # merge the two list into dict
    new_dict = {}
    for index, item in enumerate(key_list):
        new_dict.update({item: values_list[index]})

    return new_dict


def add_items(inventory: dict, items: list):
    """Add or increment items in inventory using elements from the items `list`.

    :param inventory: dict - dictionary of existing inventory.
    :param items: list - list of items to update the inventory with.
    :return: dict - the inventory updated with the new items.
    """
    # combine the two dicts
    new_dict = create_inventory(items)
    
    # adding existing inventory values to the new values from new-dict
    for key in inventory:
        if key in new_dict:
            inventory[key] += new_dict[key]
            # Remove the value from new_dict so it won't duplicate
            new_dict.pop(key)
    
    # Update the inventiry with new items from dict
    inventory.update(new_dict)

    return inventory


def decrement_items(inventory: dict, items: list):
    """Decrement items in inventory using elements from the `items` list.

    :param inventory: dict - inventory dictionary.
    :param items: list - list of items to decrement from the inventory.
    :return: dict - updated inventory with items decremented.
    """
    removed_list = create_inventory(items)

    for key in removed_list:
        if key in inventory:
            inventory[key] -= removed_list[key]

            # prevent number of items to be in negatives
            if inventory[key] < 0:
                inventory[key] = 0

    return inventory


def remove_item(inventory, item):
    """Remove item from inventory if it matches `item` string.

    :param inventory: dict - inventory dictionary.
    :param item: str - item to remove from the inventory.
    :return: dict - updated inventory with item removed. Current inventory if item does not match.
    """

    pass


def list_inventory(inventory):
    """Create a list containing all (item_name, item_count) pairs in inventory.

    :param inventory: dict - an inventory dictionary.
    :return: list of tuples - list of key, value pairs from the inventory dictionary.
    """

    pass



# Task 1
display_task_name("I", "Create an inventory based on a list")
display_example(
    create_inventory(["coal", "wood", "wood", "diamond", "diamond", "diamond"]), 
    '{"coal":1, "wood":2, "diamond":3}'
)

print(create_inventory(["coal", "wood", "wood", "diamond", "diamond", "diamond"]), "\n")



# Task 2
display_task_name("II", "Add items from a list to an existing dictionary")
display_example(
    'add_items({"coal":1}, ["wood", "iron", "coal", "wood"])', 
    '{"coal":2, "wood":2, "iron":1}'
)

print(add_items({"coal":1}, ["wood", "iron", "coal", "wood"]), "\n")



# Task 3
display_task_name("III", "Decrement items from the inventory")

display_example(
    'decrement_items({"coal":3, "diamond":1, "iron":5}, ["diamond", "coal", "iron", "iron"])', 
    '{"coal":2, "diamond":0, "iron":3}'
)

print(decrement_items({"coal":3, "diamond":1, "iron":5}, ["diamond", "coal", "iron", "iron"]), "\n")